buildscript {
    // version variables
    ext.kotlin_version = "1.3.41"
    ext.opencsv_version = '4.3.2'
    ext.jackson_version = '2.9.6'
    ext.shadow_version = "5.0.0"
    ext.log4j2_version = "2.11.1"
    ext.codec_version = "1.13"
    ext.jgit_version = "5.4.0.201906121030-r"
    ext.bencher_version = "1.0-SNAPSHOT"
    ext.junit_version = "5.3.1"
    ext.funktionale_version = "1.2"
    ext.jdt_version = "3.20.0"
    ext.apache_commons_io_version = "2.6"

    repositories {
        mavenCentral()
        jcenter()
    }

    dependencies {
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version")
    }
}

group = "smb.conf.sop"
version = "1.0-SNAPSHOT"

apply(plugin: "kotlin")
apply(plugin: "application")

sourceCompatibility = 1.8

repositories {
    mavenCentral()
    jcenter()
    mavenLocal()
}

dependencies {
    compile("org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version")
    compile("org.jetbrains.kotlin:kotlin-reflect:$kotlin_version")
    compile("com.opencsv:opencsv:$opencsv_version")
    compile("com.fasterxml.jackson.dataformat:jackson-dataformat-xml:$jackson_version")
    compile("com.fasterxml.jackson.module:jackson-module-kotlin:$jackson_version")
    compile("org.eclipse.jgit:org.eclipse.jgit:$jgit_version")
    compile("org.apache.logging.log4j:log4j-api:$log4j2_version")
    compile("org.apache.logging.log4j:log4j-core:$log4j2_version")
    compile("commons-codec:commons-codec:$codec_version")
    compile("ch.uzh.ifi.seal:bencher:$bencher_version")
    compile("org.funktionale:funktionale-all:$funktionale_version")
    compile(group: "org.eclipse.jdt", name: "org.eclipse.jdt.core", version: jdt_version)
    compile(group: "commons-io", name: "commons-io", version: apache_commons_io_version)



    testImplementation(
            "org.junit.jupiter:junit-jupiter-api:$junit_version",
            "org.junit.jupiter:junit-jupiter-params:$junit_version"
    )
    testRuntimeOnly(
            "org.junit.jupiter:junit-jupiter-engine:$junit_version"
    )
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

def splitWith(c, clargs) {
    def inC = false
    def ret = []
    def curr = ""

    clargs.each { i ->
        if (i == c) {
            inC = !inC
        } else if (i == " " && !inC) {
            ret.add(curr)
            curr = ""
        } else {
            curr += i
        }
    }

    if (curr != "") {
        ret.add(curr)
    }

    return ret
}

def getCLIArgs() {
    def clargs = System.getProperty("args")
    def newArgs = []
    if (clargs != null) {
        if (clargs.contains("\"")) {
            newArgs = splitWith("\"", clargs)
        } else if (clargs.contains("\'")) {
            newArgs = splitWith("\'", clargs)
        } else {
            newArgs = clargs.split(" ")
        }
    }
    return newArgs
}

task runClone(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'smb.conf.sop.datapreparation.clone.MainKt'
    args(getCLIArgs())
}

task runEvaluation(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'smb.conf.sop.evaluation.MainKt'
    args(getCLIArgs())
}

task runCreateMerged(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'smb.conf.sop.utils.filemerger.MainKt'
    args(getCLIArgs())
}

task runCreateMergedIsMain(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'smb.conf.sop.utils.resultismain.MainKt'
    args(getCLIArgs())
}

task runExecutionTime(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'smb.conf.sop.analysis.executiontime.MainKt'
    args(getCLIArgs())
}

task runFeatures(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'smb.conf.sop.analysis.features.MainKt'
    args(getCLIArgs())
}

task runJMHVersion(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'smb.conf.sop.analysis.jmhversion.MainKt'
    args(getCLIArgs())
}

task runNrBenchmarks(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'smb.conf.sop.analysis.numberofbenchmarks.MainKt'
    args(getCLIArgs())
}


test {
    useJUnitPlatform()
}