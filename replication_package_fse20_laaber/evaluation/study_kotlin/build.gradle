buildscript {
    // version variables
    ext.kotlin_version = "1.3.41"
    ext.opencsv_version = '4.6'
    ext.math3_version = '3.6.1'
    ext.commonsIO_version = '2.6'
    ext.shadow_version = "5.0.0"
    ext.log4j2_version = "2.11.1"
    ext.smile_version = "1.5.3"
    ext.bencher_version = "1.0-SNAPSHOT"
    ext.junit_version = "5.3.1"
    ext.hipparchus_version = '1.3'
    ext.funktionale_version = "1.2"

    repositories {
        mavenCentral()
        jcenter()
    }

    dependencies {
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version")
    }
}

group = "smb.conf.dynreconf"
version = "1.0-SNAPSHOT"

apply(plugin: "kotlin")
apply(plugin: "application")

sourceCompatibility = 1.8

repositories {
    mavenCentral()
    jcenter()
    mavenLocal()
    maven {
        url 'https://simulation.tudelft.nl/maven/'
    }
}

dependencies {
    compile("org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version")
    compile("org.jetbrains.kotlin:kotlin-reflect:$kotlin_version")
    compile("com.opencsv:opencsv:$opencsv_version")
    compile("org.apache.commons:commons-math3:$math3_version")
    compile("commons-io:commons-io:$commonsIO_version")
    compile("org.apache.logging.log4j:log4j-api:$log4j2_version")
    compile("org.apache.logging.log4j:log4j-core:$log4j2_version")
    compile("ch.uzh.ifi.seal:bencher:$bencher_version")
    compile("com.github.haifengl:smile-math:$smile_version")
    compile("org.hipparchus:hipparchus-stat:$hipparchus_version")
    compile("org.funktionale:funktionale-all:$funktionale_version")

    testImplementation(
            "org.junit.jupiter:junit-jupiter-api:$junit_version",
            "org.junit.jupiter:junit-jupiter-params:$junit_version"
    )
    testRuntimeOnly(
            "org.junit.jupiter:junit-jupiter-engine:$junit_version"
    )
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

def splitWith(c, clargs) {
    def inC = false
    def ret = []
    def curr = ""

    clargs.each { i ->
        if (i == c) {
            inC = !inC
        } else if (i == " " && !inC) {
            ret.add(curr)
            curr = ""
        } else {
            curr += i
        }
    }

    if (curr != "") {
        ret.add(curr)
    }

    return ret
}

def getCLIArgs() {
    def clargs = System.getProperty("args")
    def newArgs = []
    if (clargs != null) {
        if (clargs.contains("\"")) {
            newArgs = splitWith("\"", clargs)
        } else if (clargs.contains("\'")) {
            newArgs = splitWith("\'", clargs)
        } else {
            newArgs = clargs.split(" ")
        }
    }
    return newArgs
}

task runExecutorInput(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'smb.conf.dynreconf.process.A_benchmark_list.MainKt'
    args(getCLIArgs())
}

task runJsonToCSV(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'smb.conf.dynreconf.process.C_json_to_csv.MainKt'
    args(getCLIArgs())
}

task runAnalysesData(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'smb.conf.dynreconf.process.MainKt'
    args(getCLIArgs())
}

task runRQ1ChangeRateFigure(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'smb.conf.dynreconf.analysis.boxplotmeanchangerate.MainKt'
    args(getCLIArgs())
}

task runRQ1ChangeRateTable(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'smb.conf.dynreconf.analysis.variability.EvaluationKt'
    args(getCLIArgs())
}

task runRQ2Data(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'smb.conf.dynreconf.analysis.time.MainKt'
    args(getCLIArgs())
}

task runRQ2Table(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'smb.conf.dynreconf.analysis.time.EvaluationKt'
    args(getCLIArgs())
}

task runRQ2StoppageCriteriaCheckpoints(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'smb.conf.dynreconf.analysis.avgiterationandforks.EvaluationKt'
    args(getCLIArgs())
}

test {
    useJUnitPlatform()
}